#!/usr/bin/env ruby
#
# executable for cogibara google voice
#
require "bundler/setup"

require_relative '../lib/cogibara.rb'
# require_relative '../server/server.rb'

require 'net/imap'
require 'googlevoiceapi'
require 'json'

LOGIN = Cogibara::Module.settings["keys"]["google_name"]
PASS = Cogibara::Module.settings["keys"]["google_pass"]
MBOX = "[Gmail]/All Mail"

class GVPoller

  def fetch_messages
    api = @api
    json_data = api.messages_json()
    js = JSON.parse(json_data)
  end

  def poll
    msgs = fetch_messages
    childs =  msgs["messageList"].map{|m| m["children"]}.flatten
    to_me = childs.select{|m| m["type"] != 11 and m["phoneNumber"] != ""}

    if @read.size == 0
      to_me.each{|m| @read << m["id"]}
      []
    else
      unread = to_me.reject{|m| @read.include?(m["id"])}
      unread.each{|m| @read << m["id"]}
      unread
    end
  end

  def initialize
    @api = GoogleVoice::Api.new(Cogibara::Module.settings["keys"]["google_name"], Cogibara::Module.settings["keys"]["google_pass"])
    @read = []
    @start = Time.now
  end

  def cycle(sleeptime)
    loop do
      poll

      imap = Net::IMAP.new 'imap.gmail.com', ssl: true unless imap

      imap.login LOGIN, PASS
      imap.select MBOX

      Thread.new do
        puts "Starting timer"
        sleep 29 * 60
        imap.idle_done
      end


      imap.idle do |resp|
        if resp.kind_of?(Net::IMAP::ContinuationRequest) and resp.data.text == 'idling'
          puts "Starting idle loop over"
        elsif resp.kind_of?(Net::IMAP::UntaggedResponse) and resp.name == 'EXISTS'
          msgs = poll

          @cogi ||= Cogibara::Interface::GVoice.new
          puts "[#{Time.now.to_s}] got #{msgs.size}"
          msgs.each do |m|
            reply = @cogi.ask(m)
            u = Cogibara::User.for(reply.to.to_s)
            @api.sms(u.identifier, reply.message)
          end
        end
      end
    end
  end
end

puts GVPoller.new.cycle(120)